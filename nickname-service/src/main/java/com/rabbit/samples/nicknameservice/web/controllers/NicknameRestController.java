package com.rabbit.samples.nicknameservice.web.controllers;

import com.rabbit.samples.nicknameservice.services.NicknameService;
import com.rabbit.samples.nicknameservice.web.dtos.NicknameDto;
import com.rabbit.samples.nicknameservice.web.mappers.NicknameMapper;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.stream.Collectors;


@Slf4j
@FieldDefaults(level = AccessLevel.PRIVATE)
@Getter(value = AccessLevel.PROTECTED)
@RestController("nicknameRestController")
@RequestMapping("/nicknames")
public class NicknameRestController {

	@Autowired
	@Qualifier("nicknameService")
	NicknameService nicknameService;

	// PLASE NOTE: no specific qualifier because generated by MapStruct
	@Autowired
	NicknameMapper nicknameMapper;

	@GetMapping
	public List<NicknameDto> getAll() {

		log.debug("get all nicknames...");

		return getNicknameService().getAll()
				.stream()
				.map(getNicknameMapper()::mapEntityToDto)
				.collect(Collectors.toList());
	}

	@GetMapping("/employee")
	public NicknameDto getByEmployeeName(
			@RequestParam final String employeeName) {

		log.debug("get nickname by employeeName {}...", employeeName);

		return getNicknameMapper().mapEntityToDto(
				getNicknameService().getByEmployeeName(employeeName)
		);
	}

}
